###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           14/Nov/2019  10:44:44
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  H:\Year 3\EE312\driverlib\MSP430FR2xx_4xx\timer_a.c
#    Command line  =  
#        -f C:\Users\rjb17150\AppData\Local\Temp\EWD250.tmp ("H:\Year
#        3\EE312\driverlib\MSP430FR2xx_4xx\timer_a.c" -lcN "H:\Year 3\EE312\Lab
#        2\Debug\List" -o "H:\Year 3\EE312\Lab 2\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR4133__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        "H:\Year 3\EE312\Lab 2\..\" -I "H:\Year 3\EE312\Lab
#        2\..\driverlib\MSP430FR2xx_4xx\" --core=430X --data_model=small -Ol
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_GBR.1252
#    List file     =  H:\Year 3\EE312\Lab 2\Debug\List\timer_a.lst
#    Object file   =  H:\Year 3\EE312\Lab 2\Debug\Obj\timer_a.r43
#
###############################################################################

H:\Year 3\EE312\driverlib\MSP430FR2xx_4xx\timer_a.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2017, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //*****************************************************************************
     33          //
     34          // timer_a.c - Driver for the timer_a Module.
     35          //
     36          //*****************************************************************************
     37          
     38          //*****************************************************************************
     39          //
     40          //! \addtogroup timer_a_api timer_a
     41          //! @{
     42          //
     43          //*****************************************************************************
     44          
     45          #include "inc/hw_memmap.h"
     46          
     47          #ifdef __MSP430_HAS_TxA7__
     48          #include "timer_a.h"
     49          
     50          #include <assert.h>
     51          
     52          void Timer_A_startCounter ( uint16_t baseAddress,
     53              uint16_t timerMode
     54              )
     55          {
     56              HWREG16(baseAddress + OFS_TAxCTL) &= ~MC_3;
     57              HWREG16(baseAddress + OFS_TAxCTL) |= timerMode;
     58          }
     59          
     60          void Timer_A_initContinuousMode (uint16_t baseAddress,
     61              Timer_A_initContinuousModeParam *param)
     62          {
     63          
     64              HWREG16(baseAddress +
     65                  OFS_TAxCTL) &= ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
     66                                   TIMER_A_UPDOWN_MODE +
     67                                   TIMER_A_DO_CLEAR +
     68                                   TIMER_A_TAIE_INTERRUPT_ENABLE +
     69                                   ID__8
     70                                   );
     71              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
     72          
     73              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider&0x7;
     74              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
     75                                                    param->timerClear +
     76                                                    param->timerInterruptEnable_TAIE +
     77                                                    ((param->clockSourceDivider>>3)<<6));
     78          
     79              if(param->startTimer) {
     80                  HWREG16(baseAddress + OFS_TAxCTL) |= TIMER_A_CONTINUOUS_MODE;
     81              }
     82          }
     83          
     84          void Timer_A_initUpMode (uint16_t baseAddress,
     85              Timer_A_initUpModeParam *param)
     86          {
     87          
     88              HWREG16(baseAddress + OFS_TAxCTL) &=
     89                  ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
     90                    TIMER_A_UPDOWN_MODE +
     91                    TIMER_A_DO_CLEAR +
     92                    TIMER_A_TAIE_INTERRUPT_ENABLE +
     93                    ID__8
     94                    );
     95              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
     96          
     97              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider&0x7;
     98              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
     99                                                    param->timerClear +
    100                                                    param->timerInterruptEnable_TAIE +
    101                                                    ((param->clockSourceDivider>>3)<<6));
    102          
    103              if (param->startTimer) {
    104                  HWREG16(baseAddress + OFS_TAxCTL) |= TIMER_A_UP_MODE;
    105              }
    106          
    107              if (TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE ==
    108                  param->captureCompareInterruptEnable_CCR0_CCIE){
    109                  HWREG16(baseAddress + OFS_TAxCCTL0)  |= TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    110              } else   {
    111                  HWREG16(baseAddress + OFS_TAxCCTL0)  &= ~TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    112              }
    113          
    114              HWREG16(baseAddress + OFS_TAxCCR0) = param->timerPeriod;
    115          }
    116          
    117          void Timer_A_initUpDownMode(uint16_t baseAddress,
    118              Timer_A_initUpDownModeParam *param)
    119          {
    120              HWREG16(baseAddress + OFS_TAxCTL) &=
    121                  ~(TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
    122                    TIMER_A_UPDOWN_MODE +
    123                    TIMER_A_DO_CLEAR +
    124                    TIMER_A_TAIE_INTERRUPT_ENABLE +
    125                    ID__8
    126                    );
    127              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
    128          
    129              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider&0x7;
    130              HWREG16(baseAddress + OFS_TAxCTL) |= (param->clockSource +
    131                                                    param->timerClear +
    132                                                    param->timerInterruptEnable_TAIE +
    133                                                    ((param->clockSourceDivider>>3)<<6));
    134          
    135              if (param->startTimer) {
    136                  HWREG16(baseAddress + OFS_TAxCTL) |= TIMER_A_UPDOWN_MODE;
    137              }
    138          
    139              if (TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE ==
    140                  param->captureCompareInterruptEnable_CCR0_CCIE){
    141                  HWREG16(baseAddress + OFS_TAxCCTL0)  |= TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    142              } else   {
    143                  HWREG16(baseAddress + OFS_TAxCCTL0)  &= ~TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;
    144              }
    145          
    146              HWREG16(baseAddress + OFS_TAxCCR0)  = param->timerPeriod;
    147          }
    148          
    149          void Timer_A_initCaptureMode(uint16_t baseAddress,
    150              Timer_A_initCaptureModeParam *param)
    151          {
    152              HWREG16(baseAddress + param->captureRegister ) |= CAP;
    153          
    154              HWREG16(baseAddress + param->captureRegister) &=
    155                  ~(TIMER_A_CAPTUREMODE_RISING_AND_FALLING_EDGE +
    156                    TIMER_A_CAPTURE_INPUTSELECT_Vcc +
    157                    TIMER_A_CAPTURE_SYNCHRONOUS +
    158                    TIMER_A_DO_CLEAR +
    159                    TIMER_A_TAIE_INTERRUPT_ENABLE +
    160                    CM_3
    161                    );
    162          
    163              HWREG16(baseAddress + param->captureRegister) |= (param->captureMode +
    164                                                        param->captureInputSelect +
    165                                                        param->synchronizeCaptureSource +
    166                                                        param->captureInterruptEnable +
    167                                                        param->captureOutputMode
    168                                                        );
    169          }
    170          
    171          void Timer_A_initCompareMode(uint16_t baseAddress,
    172              Timer_A_initCompareModeParam *param)
    173          {
    174              HWREG16(baseAddress + param->compareRegister ) &= ~CAP;
    175          
    176              HWREG16(baseAddress + param->compareRegister) &=
    177                  ~(TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE +
    178                    TIMER_A_OUTPUTMODE_RESET_SET
    179                    );
    180          
    181              HWREG16(baseAddress + param->compareRegister) |= (param->compareInterruptEnable +
    182                                                         param->compareOutputMode
    183                                                         );
    184          
    185              HWREG16(baseAddress + param->compareRegister + OFS_TAxR) = param->compareValue;
    186          }
    187          
    188          void Timer_A_enableInterrupt (uint16_t baseAddress)
    189          {
    190              HWREG16(baseAddress + OFS_TAxCTL) |= TAIE;
    191          }
    192          
    193          void Timer_A_disableInterrupt (uint16_t baseAddress)
    194          {
    195              HWREG16(baseAddress + OFS_TAxCTL) &= ~TAIE;
    196          }
    197          
    198          uint32_t Timer_A_getInterruptStatus (uint16_t baseAddress)
    199          {
    200              return ( HWREG16(baseAddress + OFS_TAxCTL) & TAIFG );
    201          }
    202          
    203          void Timer_A_enableCaptureCompareInterrupt (uint16_t baseAddress,
    204              uint16_t captureCompareRegister
    205              )
    206          {
    207              HWREG16(baseAddress + captureCompareRegister) |= CCIE;
    208          }
    209          
    210          void Timer_A_disableCaptureCompareInterrupt (uint16_t baseAddress,
    211              uint16_t captureCompareRegister
    212              )
    213          {
    214              HWREG16(baseAddress + captureCompareRegister) &= ~CCIE;
    215          }
    216          
    217          uint32_t Timer_A_getCaptureCompareInterruptStatus (uint16_t baseAddress,
    218          		 uint16_t captureCompareRegister,
    219          		 uint16_t mask
    220          		 )
    221          {
    222              return ( HWREG16(baseAddress + captureCompareRegister) & mask );
    223          }
    224          
    225          void Timer_A_clear (uint16_t baseAddress)
    226          {
    227              HWREG16(baseAddress + OFS_TAxCTL) |= TACLR;
    228          }
    229          
    230          uint8_t Timer_A_getSynchronizedCaptureCompareInput
    231              (uint16_t baseAddress,
    232              uint16_t captureCompareRegister,
    233              uint16_t synchronized
    234              )
    235          {
    236              if (HWREG16(baseAddress + captureCompareRegister) & synchronized){
    237                  return ( TIMER_A_CAPTURECOMPARE_INPUT_HIGH) ;
    238              } else   {
    239                  return ( TIMER_A_CAPTURECOMPARE_INPUT_LOW) ;
    240              }
    241          }
    242          
    243          uint8_t Timer_A_getOutputForOutputModeOutBitValue
    244              (uint16_t baseAddress,
    245              uint16_t captureCompareRegister
    246              )
    247          {
    248              if (HWREG16(baseAddress + captureCompareRegister) & OUT){
    249                  return ( TIMER_A_OUTPUTMODE_OUTBITVALUE_HIGH) ;
    250              } else   {
    251                  return ( TIMER_A_OUTPUTMODE_OUTBITVALUE_LOW) ;
    252              }
    253          }
    254          
    255          uint16_t Timer_A_getCaptureCompareCount
    256              (uint16_t baseAddress,
    257              uint16_t captureCompareRegister
    258              )
    259          {
    260              return  (HWREG16(baseAddress + OFS_TAxR + captureCompareRegister));
    261          }
    262          
    263          void Timer_A_setOutputForOutputModeOutBitValue
    264              (uint16_t baseAddress,
    265              uint16_t captureCompareRegister,
    266              uint8_t outputModeOutBitValue
    267              )
    268          {
    269          
    270              HWREG16(baseAddress + captureCompareRegister) &= ~OUT;
    271              HWREG16(baseAddress + captureCompareRegister) |= outputModeOutBitValue;
    272          }
    273          
    274          void Timer_A_outputPWM(uint16_t baseAddress, Timer_A_outputPWMParam *param)
    275          {
    276              HWREG16(baseAddress + OFS_TAxCTL)  &=
    277                  ~( TIMER_A_CLOCKSOURCE_INVERTED_EXTERNAL_TXCLK +
    278                     TIMER_A_UPDOWN_MODE + TIMER_A_DO_CLEAR +
    279                     TIMER_A_TAIE_INTERRUPT_ENABLE +
    280                     ID__8
    281                     );
    282              HWREG16(baseAddress + OFS_TAxEX0) &= ~TAIDEX_7;
    283          
    284              HWREG16(baseAddress + OFS_TAxEX0) |= param->clockSourceDivider&0x7;
    285              HWREG16(baseAddress + OFS_TAxCTL)  |= (param->clockSource +
    286                                                    TIMER_A_UP_MODE +
    287                                                    TIMER_A_DO_CLEAR +
    288                                                    ((param->clockSourceDivider>>3)<<6));
    289          
    290              HWREG16(baseAddress + OFS_TAxCCR0) = param->timerPeriod;
    291          
    292              HWREG16(baseAddress + OFS_TAxCCTL0)  &=
    293                  ~(TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE +
    294                    TIMER_A_OUTPUTMODE_RESET_SET);
    295          
    296              HWREG16(baseAddress + param->compareRegister) |= param->compareOutputMode;
    297          
    298              HWREG16(baseAddress + param->compareRegister + OFS_TAxR) = param->dutyCycle;
    299          }
    300          
    301          void Timer_A_stop ( uint16_t baseAddress )
    302          {
    303              HWREG16(baseAddress + OFS_TAxCTL)  &= ~MC_3;
    304          }
    305          
    306          void Timer_A_setCompareValue (  uint16_t baseAddress,
    307              uint16_t compareRegister,
    308              uint16_t compareValue
    309              )
    310          {
    311              HWREG16(baseAddress + compareRegister + OFS_TAxR) = compareValue;
    312          }
    313          
    314          void Timer_A_setOutputMode(uint16_t baseAddress,
    315                                       uint16_t compareRegister,
    316                                       uint16_t compareOutputMode)
    317          {
    318              uint16_t temp = HWREG16(baseAddress + compareRegister);
    319              HWREG16(baseAddress + compareRegister) = temp & ~(OUTMOD_7) | compareOutputMode;
    320          }
    321          void Timer_A_clearTimerInterrupt (uint16_t baseAddress)
    322          {
    323              HWREG16(baseAddress + OFS_TAxCTL) &= ~TAIFG;
    324          }
    325          
    326          void Timer_A_clearCaptureCompareInterrupt (uint16_t baseAddress,
    327              uint16_t captureCompareRegister
    328              )
    329          {
    330              HWREG16(baseAddress + captureCompareRegister)  &= ~CCIFG;
    331          }
    332          
    333          uint16_t Timer_A_getCounterValue (uint16_t baseAddress)
    334          {
    335          	uint16_t voteOne, voteTwo, res;
    336          
    337              voteTwo = HWREG16(baseAddress + OFS_TAxR);
    338          
    339          	do
    340              {
    341                  voteOne = voteTwo;
    342                  voteTwo = HWREG16(baseAddress + OFS_TAxR);
    343          
    344          		if(voteTwo > voteOne) {
    345          			res = voteTwo - voteOne;
    346          		} else if(voteOne > voteTwo) {
    347          			res = voteOne - voteTwo;
    348          		} else{
    349          			res = 0;
    350          		}
    351          
    352              } while ( res > TIMER_A_THRESHOLD);
    353          
    354              return voteTwo;
    355          }
    356          
    357          
    358          #endif
    359          //*****************************************************************************
    360          //
    361          //! Close the doxygen group for timer_a_api
    362          //! @}
    363          //
    364          //*****************************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Timer_A_clear
      4   Timer_A_clearCaptureCompareInterrupt
      4   Timer_A_clearTimerInterrupt
      4   Timer_A_disableCaptureCompareInterrupt
      4   Timer_A_disableInterrupt
      4   Timer_A_enableCaptureCompareInterrupt
      4   Timer_A_enableInterrupt
      4   Timer_A_getCaptureCompareCount
      4   Timer_A_getCaptureCompareInterruptStatus
      4   Timer_A_getCounterValue
      4   Timer_A_getInterruptStatus
      4   Timer_A_getOutputForOutputModeOutBitValue
      4   Timer_A_getSynchronizedCaptureCompareInput
      4   Timer_A_initCaptureMode
      4   Timer_A_initCompareMode
      4   Timer_A_initContinuousMode
      4   Timer_A_initUpDownMode
      4   Timer_A_initUpMode
      4   Timer_A_outputPWM
      4   Timer_A_setCompareValue
      4   Timer_A_setOutputForOutputModeOutBitValue
      4   Timer_A_setOutputMode
      4   Timer_A_startCounter
      4   Timer_A_stop


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  Timer_A_clear
       8  Timer_A_clearCaptureCompareInterrupt
       6  Timer_A_clearTimerInterrupt
      10  Timer_A_disableCaptureCompareInterrupt
       6  Timer_A_disableInterrupt
      10  Timer_A_enableCaptureCompareInterrupt
       6  Timer_A_enableInterrupt
      10  Timer_A_getCaptureCompareCount
      10  Timer_A_getCaptureCompareInterruptStatus
      50  Timer_A_getCounterValue
       8  Timer_A_getInterruptStatus
      16  Timer_A_getOutputForOutputModeOutBitValue
      16  Timer_A_getSynchronizedCaptureCompareInput
      48  Timer_A_initCaptureMode
      50  Timer_A_initCompareMode
      76  Timer_A_initContinuousMode
     116  Timer_A_initUpDownMode
     118  Timer_A_initUpMode
     106  Timer_A_outputPWM
      12  Timer_A_setCompareValue
      18  Timer_A_setOutputForOutputModeOutBitValue
      20  Timer_A_setOutputMode
      12  Timer_A_startCounter
       8  Timer_A_stop

 
 746 bytes in segment CODE
 
 746 bytes of CODE memory

Errors: none
Warnings: none
