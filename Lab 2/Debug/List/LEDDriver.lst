###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           05/Dec/2019  14:54:21
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Wiktor\Documents\EE312\Lab 2\LEDDriver.c
#    Command line  =  
#        -f C:\Users\Wiktor\AppData\Local\Temp\EW9FFA.tmp
#        ("C:\Users\Wiktor\Documents\EE312\Lab 2\LEDDriver.c" -lcN
#        "C:\Users\Wiktor\Documents\EE312\Lab 2\Debug\List" -o
#        "C:\Users\Wiktor\Documents\EE312\Lab 2\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR4133__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        "C:\Users\Wiktor\Documents\EE312\Lab 2\..\" -I
#        "C:\Users\Wiktor\Documents\EE312\Lab 2\..\driverlib\MSP430FR2xx_4xx\"
#        --core=430X --data_model=small -Ol --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_GBR.1252
#    List file     =  
#        C:\Users\Wiktor\Documents\EE312\Lab 2\Debug\List\LEDDriver.lst
#    Object file   =  
#        C:\Users\Wiktor\Documents\EE312\Lab 2\Debug\Obj\LEDDriver.r43
#
###############################################################################

C:\Users\Wiktor\Documents\EE312\Lab 2\LEDDriver.c
      1          #include "LedDriver.h"
      2          #define DELAY 10000
      3          unsigned char ledValue_ = 0;
      4          
      5          /*
      6           * Function:  initialiseLedDial
      7           * --------------------
      8           * Initialises GPIO for LED's on MSP430 board
      9           */
     10          void initialiseLedDial() {
     11            GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN7);
     12            GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN1);
     13            GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN2);
     14            GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN3);
     15            GPIO_setAsOutputPin(GPIO_PORT_P8, GPIO_PIN0);
     16          }
     17          void initialiseSwitch(){
     18            GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN3);
     19          }
     20          
     21          /*
     22           * Function:  refreshLedDial
     23           * --------------------
     24           * Changes which LED is lit based on the ledValue_ operator
     25           * Ranges from 1-8, one for each specific LED.
     26           */
     27          void refreshLedDial() {
     28            switch (ledValue_) {
     29            case 1: // LED1
     30              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     31              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     32              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     33              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN2);
     34              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     35              __delay_cycles(DELAY);
     36              break;
     37            case 2: // LED2
     38              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     39              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     40              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     41              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN2);
     42              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     43              __delay_cycles(DELAY);
     44              break;
     45            case 3: // LED3
     46              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     47              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     48              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     49              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN2);
     50              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     51              __delay_cycles(DELAY);
     52              break;
     53            case 4: // LED4
     54              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     55              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     56              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     57              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN2);
     58              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     59              __delay_cycles(DELAY);
     60              break;
     61            case 5: // LED8
     62              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     63              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     64              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     65              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN2);
     66              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     67              __delay_cycles(DELAY);
     68              break;
     69            case 6: // LED7
     70              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     71              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     72              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     73              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN2);
     74              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     75              __delay_cycles(DELAY);
     76              break;
     77            case 7: // LED6
     78              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     79              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     80              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     81              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN2);
     82              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     83              __delay_cycles(DELAY);
     84              break;
     85            case 8: // LED5
     86              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     87              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     88              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     89              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN2);
     90              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     91              __delay_cycles(DELAY);
     92              break;
     93            default:
     94              break;
     95            }
     96          }
     97          /*
     98           * Function:  setLedDial
     99           * --------------------
    100           * Changes the ledValue to the value passed in,
    101           * this helps in changing the speed of the change.
    102           * 
    103           * value: value that ledValue_ is to be changed to
    104           */
    105          void setLedDial(unsigned char value) {
    106            ledValue_ = value; 
    107          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   initialiseLedDial
        0   -> GPIO_setAsOutputPin
        4   -> GPIO_setAsOutputPin
      4   initialiseSwitch
        0   -> GPIO_setAsInputPinWithPullUpResistor
      4   refreshLedDial
        4   -> GPIO_setOutputHighOnPin
        4   -> GPIO_setOutputLowOnPin
      4   setLedDial


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      48  initialiseLedDial
       8  initialiseSwitch
       1  ledValue_
     518  refreshLedDial
       6  setLedDial

 
 580 bytes in segment CODE
   1 byte  in segment DATA16_Z
 
 580 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
