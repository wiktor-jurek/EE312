###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           14/Nov/2019  10:44:42
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  H:\Year 3\EE312\driverlib\MSP430FR2xx_4xx\eusci_a_uart.c
#    Command line  =  
#        -f C:\Users\rjb17150\AppData\Local\Temp\EWCA93.tmp ("H:\Year
#        3\EE312\driverlib\MSP430FR2xx_4xx\eusci_a_uart.c" -lcN "H:\Year
#        3\EE312\Lab 2\Debug\List" -o "H:\Year 3\EE312\Lab 2\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR4133__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        "H:\Year 3\EE312\Lab 2\..\" -I "H:\Year 3\EE312\Lab
#        2\..\driverlib\MSP430FR2xx_4xx\" --core=430X --data_model=small -Ol
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_GBR.1252
#    List file     =  H:\Year 3\EE312\Lab 2\Debug\List\eusci_a_uart.lst
#    Object file   =  H:\Year 3\EE312\Lab 2\Debug\Obj\eusci_a_uart.r43
#
###############################################################################

H:\Year 3\EE312\driverlib\MSP430FR2xx_4xx\eusci_a_uart.c
      1          /* --COPYRIGHT--,BSD
      2           * Copyright (c) 2017, Texas Instruments Incorporated
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * *  Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer.
     11           *
     12           * *  Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in the
     14           *    documentation and/or other materials provided with the distribution.
     15           *
     16           * *  Neither the name of Texas Instruments Incorporated nor the names of
     17           *    its contributors may be used to endorse or promote products derived
     18           *    from this software without specific prior written permission.
     19           *
     20           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21           * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     22           * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     23           * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     24           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     25           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     26           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
     27           * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     28           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     29           * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * --/COPYRIGHT--*/
     32          //*****************************************************************************
     33          //
     34          // eusci_a_uart.c - Driver for the eusci_a_uart Module.
     35          //
     36          //*****************************************************************************
     37          
     38          //*****************************************************************************
     39          //
     40          //! \addtogroup eusci_a_uart_api eusci_a_uart
     41          //! @{
     42          //
     43          //*****************************************************************************
     44          
     45          #include "inc/hw_memmap.h"
     46          
     47          #ifdef __MSP430_HAS_EUSCI_Ax__
     48          #include "eusci_a_uart.h"
     49          
     50          #include <assert.h>
     51          
     52          bool EUSCI_A_UART_init(uint16_t baseAddress, EUSCI_A_UART_initParam *param)
     53          {
     54              bool retVal = STATUS_SUCCESS;
     55          
     56              //Disable the USCI Module
     57              HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCSWRST;
     58          
     59              //Clock source select
     60              HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~UCSSEL_3;
     61              HWREG16(baseAddress + OFS_UCAxCTLW0) |= (uint16_t)param->selectClockSource;
     62          
     63              //MSB, LSB select
     64              HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~UCMSB;
     65              HWREG16(baseAddress + OFS_UCAxCTLW0) |= param->msborLsbFirst;
     66          
     67              //UCSPB = 0(1 stop bit) OR 1(2 stop bits)
     68              HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~UCSPB;
     69              HWREG16(baseAddress + OFS_UCAxCTLW0) |= param->numberofStopBits;
     70          
     71              //Parity
     72              switch (param->parity){
     73                  case EUSCI_A_UART_NO_PARITY:
     74                      //No Parity
     75                      HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~UCPEN;
     76                      break;
     77                  case EUSCI_A_UART_ODD_PARITY:
     78                      //Odd Parity
     79                      HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCPEN;
     80                      HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~UCPAR;
     81                      break;
     82                  case EUSCI_A_UART_EVEN_PARITY:
     83                      //Even Parity
     84                      HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCPEN;
     85                      HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCPAR;
     86                      break;
     87              }
     88          
     89              //BaudRate Control Register
     90              HWREG16(baseAddress + OFS_UCAxBRW ) = param->clockPrescalar;
     91              //Modulation Control Register
     92              HWREG16(baseAddress + OFS_UCAxMCTLW) = ((param->secondModReg <<8)
     93                  + (param->firstModReg <<4) + param->overSampling );
     94          
     95              //Asynchronous mode & 8 bit character select & clear mode
     96              HWREG16(baseAddress + OFS_UCAxCTLW0) &=  ~(UCSYNC +
     97                                                       UC7BIT +
     98                                                       UCMODE_3
     99                                                       );
    100          
    101              //Configure  UART mode.
    102              HWREG16(baseAddress + OFS_UCAxCTLW0) |= param->uartMode ;
    103          
    104              //Reset UCRXIE, UCBRKIE, UCDORM, UCTXADDR, UCTXBRK
    105              HWREG16(baseAddress + OFS_UCAxCTLW0)  &= ~(UCRXEIE + UCBRKIE + UCDORM +
    106                                                       UCTXADDR + UCTXBRK
    107                                                       );
    108              return (retVal);
    109          }
    110          
    111          void EUSCI_A_UART_transmitData ( uint16_t baseAddress,
    112              uint8_t transmitData
    113              )
    114          {
    115              //If interrupts are not used, poll for flags
    116              if (!(HWREG16(baseAddress + OFS_UCAxIE) & UCTXIE)){
    117                  //Poll for transmit interrupt flag
    118                  while (!(HWREG16(baseAddress + OFS_UCAxIFG) & UCTXIFG));
    119              }
    120          
    121              HWREG16(baseAddress + OFS_UCAxTXBUF) = transmitData;
    122          }
    123          
    124          uint8_t EUSCI_A_UART_receiveData (uint16_t baseAddress)
    125          {
    126              //If interrupts are not used, poll for flags
    127              if (!(HWREG16(baseAddress + OFS_UCAxIE) & UCRXIE)){
    128                  //Poll for receive interrupt flag
    129                  while (!(HWREG16(baseAddress + OFS_UCAxIFG) & UCRXIFG));
    130              }
    131          
    132              return ( HWREG16(baseAddress + OFS_UCAxRXBUF)) ;
    133          }
    134          
    135          void EUSCI_A_UART_enableInterrupt (uint16_t baseAddress,
    136              uint8_t mask
    137              )
    138          {
    139              uint8_t locMask;
    140          
    141              locMask = (mask & (EUSCI_A_UART_RECEIVE_INTERRUPT
    142                  | EUSCI_A_UART_TRANSMIT_INTERRUPT
    143                  | EUSCI_A_UART_STARTBIT_INTERRUPT
    144                  | EUSCI_A_UART_TRANSMIT_COMPLETE_INTERRUPT));
    145          
    146              HWREG16(baseAddress + OFS_UCAxIE) |= (uint16_t)locMask;
    147          
    148              locMask = (mask & (EUSCI_A_UART_RECEIVE_ERRONEOUSCHAR_INTERRUPT
    149                  | EUSCI_A_UART_BREAKCHAR_INTERRUPT));
    150              HWREG16(baseAddress + OFS_UCAxCTLW0) |= (uint16_t)locMask;
    151          }
    152          
    153          void EUSCI_A_UART_disableInterrupt (uint16_t baseAddress,
    154              uint8_t mask
    155              )
    156          {
    157              uint8_t locMask;
    158          
    159              locMask = (mask & (EUSCI_A_UART_RECEIVE_INTERRUPT
    160                  | EUSCI_A_UART_TRANSMIT_INTERRUPT
    161                  | EUSCI_A_UART_STARTBIT_INTERRUPT
    162                  | EUSCI_A_UART_TRANSMIT_COMPLETE_INTERRUPT));
    163              HWREG16(baseAddress + OFS_UCAxIE) &= (uint16_t)~locMask;
    164          
    165              locMask = (mask & (EUSCI_A_UART_RECEIVE_ERRONEOUSCHAR_INTERRUPT
    166                  | EUSCI_A_UART_BREAKCHAR_INTERRUPT));
    167              HWREG16(baseAddress + OFS_UCAxCTLW0) &= (uint16_t)~locMask;
    168          }
    169          
    170          uint8_t EUSCI_A_UART_getInterruptStatus (uint16_t baseAddress,
    171              uint8_t mask)
    172          {
    173              return ( HWREG16(baseAddress + OFS_UCAxIFG) & mask );
    174          }
    175          
    176          void EUSCI_A_UART_clearInterrupt (uint16_t baseAddress, uint16_t mask)
    177          {
    178              //Clear the UART interrupt source.
    179              HWREG16(baseAddress + OFS_UCAxIFG) &= ~(mask);
    180          }
    181          
    182          void EUSCI_A_UART_enable (uint16_t baseAddress)
    183          {
    184              //Reset the UCSWRST bit to enable the USCI Module
    185              HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~(UCSWRST);
    186          }
    187          
    188          void EUSCI_A_UART_disable (uint16_t baseAddress)
    189          {
    190              //Set the UCSWRST bit to disable the USCI Module
    191              HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCSWRST;
    192          }
    193          
    194          uint8_t EUSCI_A_UART_queryStatusFlags (uint16_t baseAddress,
    195              uint8_t mask)
    196          {
    197              return ( HWREG16(baseAddress + OFS_UCAxSTATW) & mask );
    198          }
    199          
    200          void EUSCI_A_UART_setDormant (uint16_t baseAddress)
    201          {
    202              HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCDORM;
    203          }
    204          
    205          void EUSCI_A_UART_resetDormant (uint16_t baseAddress)
    206          {
    207              HWREG16(baseAddress + OFS_UCAxCTLW0) &= ~UCDORM;
    208          }
    209          
    210          void EUSCI_A_UART_transmitAddress (uint16_t baseAddress,
    211              uint8_t transmitAddress)
    212          {
    213              //Set UCTXADDR bit
    214              HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCTXADDR;
    215          
    216              //Place next byte to be sent into the transmit buffer
    217              HWREG16(baseAddress + OFS_UCAxTXBUF) = transmitAddress;
    218          }
    219          
    220          void EUSCI_A_UART_transmitBreak (uint16_t baseAddress)
    221          {
    222              //Set UCTXADDR bit
    223              HWREG16(baseAddress + OFS_UCAxCTLW0) |= UCTXBRK;
    224          
    225              //If current mode is automatic baud-rate detection
    226              if (EUSCI_A_UART_AUTOMATIC_BAUDRATE_DETECTION_MODE ==
    227                  (HWREG16(baseAddress + OFS_UCAxCTLW0) &
    228                   EUSCI_A_UART_AUTOMATIC_BAUDRATE_DETECTION_MODE)){
    229                  HWREG16(baseAddress + OFS_UCAxTXBUF) = EUSCI_A_UART_AUTOMATICBAUDRATE_SYNC;
    230              } else   {
    231                  HWREG16(baseAddress + OFS_UCAxTXBUF) = DEFAULT_SYNC;
    232              }
    233          
    234              //If interrupts are not used, poll for flags
    235              if (!(HWREG16(baseAddress + OFS_UCAxIE) & UCTXIE)){
    236                  //Poll for transmit interrupt flag
    237                  while (!(HWREG16(baseAddress + OFS_UCAxIFG) & UCTXIFG));
    238              }
    239          }
    240          
    241          uint32_t EUSCI_A_UART_getReceiveBufferAddress (uint16_t baseAddress)
    242          {
    243              return ( baseAddress + OFS_UCAxRXBUF );
    244          }
    245          
    246          uint32_t EUSCI_A_UART_getTransmitBufferAddress (uint16_t baseAddress)
    247          {
    248              return ( baseAddress + OFS_UCAxTXBUF );
    249          }
    250          
    251          void EUSCI_A_UART_selectDeglitchTime(uint16_t baseAddress,
    252                      uint16_t deglitchTime
    253                      )
    254          {
    255              HWREG16(baseAddress + OFS_UCAxCTLW1) &= ~(UCGLIT1 + UCGLIT0);
    256          
    257              HWREG16(baseAddress + OFS_UCAxCTLW1) |= deglitchTime;
    258          }
    259          
    260          void EUSCI_A_UART_remapPins (uint16_t baseAddress, uint8_t pinsSelect)
    261          {
    262          #ifdef USCIARMP
    263              HWREG16(SYS_BASE + OFS_SYSCFG3) &= ~USCIARMP;
    264              HWREG16(SYS_BASE + OFS_SYSCFG3) |= pinsSelect;
    265          #elif defined(USCIA0RMP)
    266              HWREG16(SYS_BASE + OFS_SYSCFG3) &= ~USCIA0RMP;
    267              HWREG16(SYS_BASE + OFS_SYSCFG3) |= pinsSelect;
    268          #endif
    269          }
    270          
    271          #endif
    272          //*****************************************************************************
    273          //
    274          //! Close the doxygen group for eusci_a_uart_api
    275          //! @}
    276          //
    277          //*****************************************************************************

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   EUSCI_A_UART_clearInterrupt
      4   EUSCI_A_UART_disable
      4   EUSCI_A_UART_disableInterrupt
      4   EUSCI_A_UART_enable
      4   EUSCI_A_UART_enableInterrupt
      4   EUSCI_A_UART_getInterruptStatus
      4   EUSCI_A_UART_getReceiveBufferAddress
      4   EUSCI_A_UART_getTransmitBufferAddress
      6   EUSCI_A_UART_init
      4   EUSCI_A_UART_queryStatusFlags
      4   EUSCI_A_UART_receiveData
      4   EUSCI_A_UART_remapPins
      4   EUSCI_A_UART_resetDormant
      4   EUSCI_A_UART_selectDeglitchTime
      4   EUSCI_A_UART_setDormant
      4   EUSCI_A_UART_transmitAddress
      4   EUSCI_A_UART_transmitBreak
      4   EUSCI_A_UART_transmitData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  EUSCI_A_UART_clearInterrupt
       6  EUSCI_A_UART_disable
      32  EUSCI_A_UART_disableInterrupt
       6  EUSCI_A_UART_enable
      32  EUSCI_A_UART_enableInterrupt
      10  EUSCI_A_UART_getInterruptStatus
       8  EUSCI_A_UART_getReceiveBufferAddress
       8  EUSCI_A_UART_getTransmitBufferAddress
     188  EUSCI_A_UART_init
      10  EUSCI_A_UART_queryStatusFlags
      32  EUSCI_A_UART_receiveData
       2  EUSCI_A_UART_remapPins
       6  EUSCI_A_UART_resetDormant
      18  EUSCI_A_UART_selectDeglitchTime
       6  EUSCI_A_UART_setDormant
      18  EUSCI_A_UART_transmitAddress
      68  EUSCI_A_UART_transmitBreak
      36  EUSCI_A_UART_transmitData

 
 496 bytes in segment CODE
 
 496 bytes of CODE memory

Errors: none
Warnings: none
